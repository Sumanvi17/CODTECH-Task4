library_item.py
Contains the LibraryItem class and its subclasses (Book, Magazine, DVD):

from datetime import datetime, timedelta
class LibraryItem:
    def __init__(self, title, author, category, item_id):
        self.title = title
        self.author = author
        self.category = category
        self.item_id = item_id
        self.checked_out = False
        self.due_date = None
    def check_out(self, days=14):
        if not self.checked_out:
            self.checked_out = True
            self.due_date = datetime.now() + timedelta(days=days)
            print(f"Item '{self.title}' checked out. Due date: {self.due_date.strftime('%Y-%m-%d')}")
        else:
            print(f"Item '{self.title}' is already checked out.")
    def return_item(self):
        if self.checked_out:
            self.checked_out = False
            overdue_days = (datetime.now() - self.due_date).days
            fine = max(0, overdue_days * 1)
            self.due_date = None
            print(f"Item '{self.title}' returned. Fine: ${fine:.2f}")
        else:
            print(f"Item '{self.title}' is not checked out.")
class Book(LibraryItem):
    pass
class Magazine(LibraryItem):
    pass
class DVD(LibraryItem):
    pass


library.py
Contains the Library class for managing the collection:

from library_item import LibraryItem, Book, Magazine, DVD
class Library:
    def __init__(self):
        self.collection = {}
    def add_item(self, item):
        self.collection[item.item_id] = item
        print(f"Added '{item.title}' (ID: {item.item_id}) to the library.")
    def search_items(self, keyword):
        results = [item for item in self.collection.values() if 
                   keyword.lower() in item.title.lower() or 
                   keyword.lower() in item.author.lower() or 
                   keyword.lower() in item.category.lower()]
        if results:
            print("Search Results:")
            for item in results:
                status = "Available" if not item.checked_out else "Checked Out"
                print(f"{item.title} by {item.author} (Category: {item.category}, Status: {status})")
        else:
            print("No items found.")    def check_out_item(self, item_id):
        if item_id in self.collection:
            self.collection[item_id].check_out()
        else:
            print("Item not found.")
    def return_item(self, item_id):
        if item_id in self.collection:
            self.collection[item_id].return_item()
        else:
            print("Item not found.")


main.py
Contains the user interface and program entry point:

from library import Library
from library_item import Book, Magazine, DVD
def main():
    library = Library()
    while True:
        print("\nLibrary Management System")
        print("1. Add Item")
        print("2. Check Out Item")
        print("3. Return Item")
        print("4. Search Items")
        print("5. Exit")
        choice = input("Enter your choice: ")
        if choice == "1":
            title = input("Enter title: ")
            author = input("Enter author: ")
            category = input("Enter category (Book/Magazine/DVD): ")
            item_id = input("Enter unique ID: ")
            if category.lower() == "book":
                item = Book(title, author, category, item_id)
            elif category.lower() == "magazine":
                item = Magazine(title, author, category, item_id)
            elif category.lower() == "dvd":
                item = DVD(title, author, category, item_id)
            else:
                print("Invalid category.")
                continue
            library.add_item(item)
        elif choice == "2":
            item_id = input("Enter item ID to check out: ")
            library.check_out_item(item_id)
        elif choice == "3":
            item_id = input("Enter item ID to return: ")
            library.return_item(item_id)
        elif choice == "4":
            keyword = input("Enter search keyword: ")
            library.search_items(keyword)
        elif choice == "5":
            print("Exiting the system.")
            break
        else:
            print("Invalid choice. Please try again.")
if __name__ == "__main__":
    main()
